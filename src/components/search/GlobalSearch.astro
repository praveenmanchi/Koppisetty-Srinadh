---
// Fundations
import Text from "@/components/fundations/elements/Text.astro";
import Button from "@/components/fundations/elements/Button.astro";

// Content Collections
import { getCollection } from "astro:content";
const allPosts = await getCollection("posts");
const allWork = await getCollection("work");

// Create search index data for client-side search
const searchData = {
  posts: allPosts.map(post => ({
    slug: post.slug,
    title: post.data.title,
    description: post.data.description,
    tags: post.data.tags?.join(', ') || '',
    type: 'blog',
    url: `/blog/posts/${post.slug}`,
    image: post.data.image?.url || '/blog/1.jpg'
  })),
  work: allWork.map(work => ({
    slug: work.slug,
    title: work.data.title,
    description: work.data.description,
    sector: work.data.projectData?.[0]?.sector || '',
    service: work.data.projectData?.[0]?.service || '',
    tools: work.data.projectData?.[0]?.tools || '',
    type: 'case-study',
    url: `/casestudies/${work.slug}`,
    image: work.data.thumbnail?.url || '/work/1.jpeg'
  }))
};
---

<div class="global-search">
  <!-- Search Toggle Button -->
  <Button 
    id="search-toggle"
    variant="secondary" 
    size="small"
    class="search-toggle-btn"
    aria-label="Open search"
  >
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
    </svg>
    Search
  </Button>

  <!-- Search Modal -->
  <div 
    id="search-modal" 
    class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 opacity-0 pointer-events-none transition-opacity duration-300"
    aria-hidden="true"
  >
    <div class="flex items-start justify-center min-h-screen p-4 pt-16">
      <div class="bg-white dark:bg-base-900 rounded-lg shadow-xl w-full max-w-2xl max-h-[80vh] overflow-hidden">
        <!-- Search Header -->
        <div class="p-4 border-b border-base-200 dark:border-base-700">
          <div class="flex items-center gap-3">
            <svg class="w-5 h-5 text-base-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            <input
              id="search-input"
              type="text"
              placeholder="Search portfolio, blog posts, and case studies..."
              class="flex-1 text-lg bg-transparent border-none outline-none text-base-900 dark:text-white placeholder-base-400"
              autocomplete="off"
            />
            <button 
              id="search-close"
              class="p-1 text-base-400 hover:text-base-600 dark:hover:text-base-300"
              aria-label="Close search"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>

        <!-- Search Results -->
        <div id="search-results" class="max-h-96 overflow-y-auto">
          <!-- Default state -->
          <div id="search-default" class="p-8 text-center">
            <Text variant="textBase" class="text-base-500 dark:text-base-400">
              Start typing to search across blog posts, case studies, and portfolio content.
            </Text>
            <div class="mt-4 grid grid-cols-2 gap-2 text-sm">
              <div class="text-left">
                <Text variant="textSM" class="font-medium text-base-600 dark:text-base-300">Quick filters:</Text>
                <div class="mt-1 space-y-1">
                  <Text tag="button" variant="textSM" class="search-filter block text-accent-600 hover:text-accent-700 dark:text-accent-400" data-filter="type:blog">Blog posts</Text>
                  <Text tag="button" variant="textSM" class="search-filter block text-accent-600 hover:text-accent-700 dark:text-accent-400" data-filter="type:case-study">Case studies</Text>
                </div>
              </div>
              <div class="text-left">
                <Text variant="textSM" class="font-medium text-base-600 dark:text-base-300">Search by:</Text>
                <div class="mt-1 space-y-1">
                  <Text variant="textSM" class="text-base-500 dark:text-base-400">• Title & description</Text>
                  <Text variant="textSM" class="text-base-500 dark:text-base-400">• Tools & technologies</Text>
                  <Text variant="textSM" class="text-base-500 dark:text-base-400">• Industry & services</Text>
                </div>
              </div>
            </div>
          </div>

          <!-- Results container -->
          <div id="search-results-list" class="hidden">
            <!-- Results will be dynamically inserted here -->
          </div>

          <!-- No results state -->
          <div id="search-no-results" class="hidden p-8 text-center">
            <Text variant="textBase" class="text-base-500 dark:text-base-400">
              No results found. Try different keywords or check spelling.
            </Text>
          </div>
        </div>

        <!-- Search Footer -->
        <div class="p-3 border-t border-base-200 dark:border-base-700 text-center">
          <Text variant="textXS" class="text-base-400">
            Press <kbd class="px-1 py-0.5 bg-base-100 dark:bg-base-800 rounded text-xs">Esc</kbd> to close, 
            <kbd class="px-1 py-0.5 bg-base-100 dark:bg-base-800 rounded text-xs">↑↓</kbd> to navigate
          </Text>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ searchData }}>
  // Search functionality
  document.addEventListener('DOMContentLoaded', function() {
    const searchToggle = document.getElementById('search-toggle');
    const searchModal = document.getElementById('search-modal');
    const searchInput = document.getElementById('search-input');
    const searchClose = document.getElementById('search-close');
    const searchDefault = document.getElementById('search-default');
    const searchResultsList = document.getElementById('search-results-list');
    const searchNoResults = document.getElementById('search-no-results');
    const searchFilters = document.querySelectorAll('.search-filter');

    let currentFilter = '';
    let selectedIndex = -1;

    // Combine all search data
    const allItems = [...searchData.posts, ...searchData.work];

    // Open search modal
    function openSearch() {
      searchModal.classList.remove('opacity-0', 'pointer-events-none');
      searchModal.setAttribute('aria-hidden', 'false');
      searchInput.focus();
      document.body.style.overflow = 'hidden';
    }

    // Close search modal
    function closeSearch() {
      searchModal.classList.add('opacity-0', 'pointer-events-none');
      searchModal.setAttribute('aria-hidden', 'true');
      searchInput.value = '';
      currentFilter = '';
      selectedIndex = -1;
      showDefault();
      document.body.style.overflow = '';
    }

    // Show default state
    function showDefault() {
      searchDefault.classList.remove('hidden');
      searchResultsList.classList.add('hidden');
      searchNoResults.classList.add('hidden');
    }

    // Show results
    function showResults() {
      searchDefault.classList.add('hidden');
      searchResultsList.classList.remove('hidden');
      searchNoResults.classList.add('hidden');
    }

    // Show no results
    function showNoResults() {
      searchDefault.classList.add('hidden');
      searchResultsList.classList.add('hidden');
      searchNoResults.classList.remove('hidden');
    }

    // Search function
    function performSearch(query) {
      if (!query.trim() && !currentFilter) {
        showDefault();
        return;
      }

      const searchTerms = query.toLowerCase().split(' ').filter(term => term.length > 0);
      let filteredItems = allItems;

      // Apply type filter if active
      if (currentFilter) {
        const [filterType, filterValue] = currentFilter.split(':');
        if (filterType === 'type') {
          filteredItems = allItems.filter(item => item.type === filterValue);
        }
      }

      // Search through items
      const results = filteredItems.filter(item => {
        const searchableText = [
          item.title,
          item.description,
          item.tags || '',
          item.sector || '',
          item.service || '',
          item.tools || ''
        ].join(' ').toLowerCase();

        return searchTerms.every(term => searchableText.includes(term));
      });

      if (results.length === 0) {
        showNoResults();
        return;
      }

      // Render results
      showResults();
      searchResultsList.innerHTML = results.map((item, index) => `
        <a 
          href="${item.url}" 
          class="search-result-item flex items-center gap-4 p-4 hover:bg-base-50 dark:hover:bg-base-800 border-b border-base-100 dark:border-base-800 last:border-b-0 ${index === selectedIndex ? 'bg-base-50 dark:bg-base-800' : ''}"
          data-index="${index}"
        >
          <div class="flex-shrink-0 w-12 h-12 bg-base-200 dark:bg-base-700 rounded-md overflow-hidden">
            <img src="${item.image}" alt="" class="w-full h-full object-cover" loading="lazy" />
          </div>
          <div class="flex-1 min-w-0">
            <div class="flex items-center gap-2 mb-1">
              <h3 class="font-medium text-base-900 dark:text-white truncate">${item.title}</h3>
              <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${
                item.type === 'blog' 
                  ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' 
                  : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300'
              }">
                ${item.type === 'blog' ? 'Blog' : 'Case Study'}
              </span>
            </div>
            <p class="text-sm text-base-500 dark:text-base-400 line-clamp-2">${item.description}</p>
            ${item.sector ? `<p class="text-xs text-base-400 dark:text-base-500 mt-1">${item.sector}${item.service ? ` • ${item.service}` : ''}</p>` : ''}
          </div>
        </a>
      `).join('');

      selectedIndex = -1;
    }

    // Event listeners
    searchToggle?.addEventListener('click', openSearch);
    searchClose.addEventListener('click', closeSearch);
    
    // Additional search toggles (desktop and mobile nav)
    const desktopSearchToggle = document.getElementById('desktop-search-toggle');
    const mobileSearchToggle = document.getElementById('mobile-search-toggle');
    
    desktopSearchToggle?.addEventListener('click', openSearch);
    mobileSearchToggle?.addEventListener('click', openSearch);
    
    // Close on backdrop click
    searchModal.addEventListener('click', function(e) {
      if (e.target === searchModal) {
        closeSearch();
      }
    });

    // Search input handler
    searchInput.addEventListener('input', function() {
      performSearch(this.value);
    });

    // Quick filter handlers
    searchFilters.forEach(filter => {
      filter.addEventListener('click', function() {
        currentFilter = this.dataset.filter;
        searchInput.focus();
        performSearch(searchInput.value);
        
        // Update filter button states
        searchFilters.forEach(f => f.classList.remove('font-medium'));
        this.classList.add('font-medium');
      });
    });

    // Keyboard navigation
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && !searchModal.classList.contains('pointer-events-none')) {
        closeSearch();
      }
      
      // Ctrl+K or Cmd+K to open search
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        openSearch();
      }
      
      // Arrow key navigation in results
      if (!searchModal.classList.contains('pointer-events-none') && !searchDefault.classList.contains('hidden')) {
        return; // Only navigate when results are shown
      }
      
      const resultItems = document.querySelectorAll('.search-result-item');
      if (resultItems.length === 0) return;
      
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        selectedIndex = Math.min(selectedIndex + 1, resultItems.length - 1);
        updateSelection(resultItems);
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        selectedIndex = Math.max(selectedIndex - 1, -1);
        updateSelection(resultItems);
      } else if (e.key === 'Enter' && selectedIndex >= 0) {
        e.preventDefault();
        resultItems[selectedIndex].click();
      }
    });

    function updateSelection(resultItems) {
      resultItems.forEach((item, index) => {
        item.classList.toggle('bg-base-50', index === selectedIndex);
        item.classList.toggle('dark:bg-base-800', index === selectedIndex);
      });
      
      if (selectedIndex >= 0) {
        resultItems[selectedIndex].scrollIntoView({ block: 'nearest' });
      }
    }
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>